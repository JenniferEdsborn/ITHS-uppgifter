// <auto-generated />
using System;
using Films.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Films.Database.Migrations
{
    [DbContext(typeof(FilmContext))]
    [Migration("20221212132348_AddedData")]
    partial class AddedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FilmGenre", b =>
                {
                    b.Property<int>("FilmsID")
                        .HasColumnType("int");

                    b.Property<int>("GenresID")
                        .HasColumnType("int");

                    b.HasKey("FilmsID", "GenresID");

                    b.HasIndex("GenresID");

                    b.ToTable("FilmGenre");
                });

            modelBuilder.Entity("Films.Database.Entities.Film", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ProducerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Released")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ProducerID");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ProducerID = 1,
                            Released = new DateTime(2001, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lord of the Rings"
                        },
                        new
                        {
                            ID = 2,
                            ProducerID = 2,
                            Released = new DateTime(2014, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lego Movie"
                        },
                        new
                        {
                            ID = 3,
                            ProducerID = 3,
                            Released = new DateTime(1988, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Princess Bride"
                        });
                });

            modelBuilder.Entity("Films.Database.Entities.FilmGenre", b =>
                {
                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.HasKey("FilmID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("FilmGenres");

                    b.HasData(
                        new
                        {
                            FilmID = 1,
                            GenreID = 1
                        },
                        new
                        {
                            FilmID = 1,
                            GenreID = 3
                        },
                        new
                        {
                            FilmID = 2,
                            GenreID = 3
                        },
                        new
                        {
                            FilmID = 2,
                            GenreID = 2
                        },
                        new
                        {
                            FilmID = 3,
                            GenreID = 3
                        },
                        new
                        {
                            FilmID = 3,
                            GenreID = 5
                        },
                        new
                        {
                            FilmID = 3,
                            GenreID = 1
                        });
                });

            modelBuilder.Entity("Films.Database.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            ID = 2,
                            GenreName = "Animated"
                        },
                        new
                        {
                            ID = 3,
                            GenreName = "Adventure"
                        },
                        new
                        {
                            ID = 4,
                            GenreName = "Action"
                        },
                        new
                        {
                            ID = 5,
                            GenreName = "Romance"
                        });
                });

            modelBuilder.Entity("Films.Database.Entities.Producer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Peter Jackson"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Warner Bros."
                        },
                        new
                        {
                            ID = 3,
                            Name = "Buttercup Films Ltd."
                        });
                });

            modelBuilder.Entity("FilmGenre", b =>
                {
                    b.HasOne("Films.Database.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Films.Database.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Films.Database.Entities.Film", b =>
                {
                    b.HasOne("Films.Database.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Films.Database.Entities.FilmGenre", b =>
                {
                    b.HasOne("Films.Database.Entities.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Films.Database.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
